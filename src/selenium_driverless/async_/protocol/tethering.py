# Copyright 2017 Robert Charles Smith
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# modified by kaliiiiiiiiii | Aurin Aegerter

# noinspection PyPep8
# noinspection PyArgumentList

"""
AUTO-GENERATED BY `scripts/generate_protocol.py` using `data/browser_protocol.json`
and `data/js_protocol.json` as inputs! Please do not modify this file.
"""

import logging
from typing import Any, Optional, Union

from ..helpers import PayloadMixin, BaseEvent, ChromeTypeBase

log = logging.getLogger(__name__)
from . import target as Target

class Tethering(PayloadMixin):
    """ The Tethering domain defines methods and events for browser port binding.
    """
    @classmethod
    def bind(cls,
             port: Union['int'],
             ):
        """Request browser port binding.
        :param port: Port number to bind.
        :type port: int
        """
        return (
            cls.build_send_payload("bind", {
                "port": port,
            }),
            None
        )

    @classmethod
    def unbind(cls,
               port: Union['int'],
               ):
        """Request browser port unbinding.
        :param port: Port number to unbind.
        :type port: int
        """
        return (
            cls.build_send_payload("unbind", {
                "port": port,
            }),
            None
        )



class AcceptedEvent(BaseEvent):

    js_name = 'Tethering.accepted'
    hashable = ['connectionId']
    is_hashable = True

    def __init__(self,
                 port: Union['int', dict],
                 connectionId: Union['str', dict],
                 ):
        if isinstance(port, dict):
            port = int(**port)
        self.port = port
        if isinstance(connectionId, dict):
            connectionId = str(**connectionId)
        self.connectionId = connectionId

    @classmethod
    def build_hash(cls, connectionId):
        kwargs = locals()
        kwargs.pop('cls')
        serialized_id_params = ','.join(['='.join([p, str(v)]) for p, v in kwargs.items()])
        h = '{}:{}'.format(cls.js_name, serialized_id_params)
        log.debug('generated hash = %s' % h)
        return h
